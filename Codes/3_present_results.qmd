---
title: "Make figures and tables"
date: "2023-02-07"
output: html_document
---

# Preparation

## Packages

```{r}
library(dplyr)
library(data.table)
library(ggplot2)
library(flextable)
library(sf)
library(officedown)
```

## Load results

```{r}
sum_results_whole <- readRDS(here::here("Shared/Results/sum_results_whole.rds"))

comp_results <-
  readRDS(here::here("Shared/Results/comp_results.rds")) %>%
  data.table()

sum_results_gam <- readRDS(here::here("Shared/Results/sum_results_gam.rds"))
```

## Set up a ggplot theme

```{r}
theme_fig <-
  theme_bw() +
  theme(
    axis.title.x =
      element_text(
        size = 7, angle = 0, hjust = .5, vjust = -0.3, family = "Helvetica"
      ),
    axis.title.y =
      element_text(
        size = 7, angle = 90, hjust = .5, vjust = .9, family = "Helvetica"
      ),
    axis.text.x =
      element_text(
        size = 7, angle = 0, hjust = .5, vjust = 1.5, family = "Helvetica"
      ),
    axis.text.y =
      element_text(
        size = 7, angle = 0, hjust = 1, vjust = 0, family = "Helvetica"
      ),
    axis.ticks =
      element_line(
        linewidth = 0.3, linetype = "solid"
      ),
    axis.ticks.length = unit(.15, "cm"),
    #--- legend ---#
    legend.text =
      element_text(
        size = 7, angle = 0, hjust = 0, vjust = 0.5, family = "Helvetica"
      ),
    legend.title =
      element_text(
        size = 7, angle = 0, hjust = 0, vjust = 0, family = "Helvetica"
      ),
    legend.key.size = unit(0.5, "cm"),
    #--- strip (for faceting) ---#
    strip.text = element_text(size = 7, family = "Helvetica"),
    #--- plot title ---#
    plot.title = element_text(family = "Helvetica", face = "bold", size = 7),
    #--- margin ---#
    # plot.margin = margin(0, 0, 0, 0, "cm"),
    #--- panel ---#
    panel.grid.minor = element_blank(),
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA)
  )
```




# Performance of candidate models: true, yield-based, EONR-based

```{r}
true_rank <-
  sum_results_whole[, .(N = sum(eonr_selected_true)), by = method] %>%
  .[, type := "True"]

model_selection_ranks <-
  readRDS(here::here("Shared/Results/selection_ranks.rds")) %>%
  .[, .(N_LE = sum(eonr_selected_gam), N_Y = sum(yield_selected)), by = method] %>%
  melt(id.var = "method", value.name = "N") %>%
  .[, type := case_when(
    variable == "N_LE" ~ "Local EONR",
    variable == "N_Y" ~ "Yield"
  )] %>%
  .[, variable := NULL]

all_ranks <- rbind(true_rank, model_selection_ranks)

g_ranking <-
  ggplot(all_ranks) +
  geom_bar(
    aes(y = N, x = method, fill = type),
    stat = "identity",
    position = "dodge"
  ) +
  scale_fill_viridis_d() +
  # Add labels and titles
  labs(x = "Model", y = "Count", fill = "Selection Type") +
  theme_fig +
  theme(
    legend.position = "bottom"
  )

ggsave(
  "GitControlled/Writing/FiguresTables/g_ranking.png",
  g_ranking,
  width = 6,
  height = 3.5,
  dpi = 400
)
```

## Table

```{r}
accuracy_table <-
  comp_results %>%
  .[, .(num_folds, num_repeats, comp_summary)] %>%
  tidyr::unnest() %>%
  data.table() %>%
  # .[eonr_selected_true == 1, ] %>%
  .[, .(
    num_selected_true = sum(eonr_selected_true),
    #--- number of times eonr-based selection correctly chose the best model by model ---#
    num_selected_leonr_correct = sum(eonr_selected_true == 1 & eonr_selected_gam),
    num_selected_leonr = sum(eonr_selected_gam),
    #--- number of times yield-based selection correctly chose the best model by model ---#
    num_selected_yield_correct = sum(eonr_selected_true == 1 & yield_selected),
    num_selected_yield = sum(yield_selected)
  ),
  by = .(method, num_folds, num_repeats)
  ]

main_accuracy_data <-
  accuracy_table[num_folds == 10 & num_repeats == 10, ] %>%
  .[, leonr_based := paste0(num_selected_leonr_correct, " (", num_selected_leonr, ")")] %>%
  .[, yield_based := paste0(num_selected_yield_correct, " (", num_selected_yield, ")")] %>%
  .[, .(method, num_selected_true, leonr_based, yield_based)]

main_accuracy_table <-
  flextable(main_accuracy_data) %>%
  autofit() %>%
  align(j = 2:4, align = "center")

saveRDS(main_accuracy_table, here::here("GitControlled/Writing/FiguresTables/main_selection_accuracy_table.rds"))

saveRDS(accuracy_table, here::here("GitControlled/Writing/FiguresTables/selection_accuracy_table.rds"))
```


# Profit loss

```{r}
profit_loss_data <-
  comp_results[, .(num_folds, num_repeats, loss_data)] %>%
  tidyr::unnest() %>%
  data.table() %>%
  .[, .(sim, num_folds, num_repeats, e_pi_loss, y_pi_loss)] %>%
  melt(id.var = c("sim", "num_folds", "num_repeats")) %>%
  .[, selection := case_when(
    variable == "e_pi_loss" ~ "LEONR-based Selection",
    variable == "y_pi_loss" ~ "Yield-based Selection"
  )]
```

## Main case

```{r}
g_pi_loss <-
  ggplot(profit_loss_data[num_folds == 5 & num_repeats == 5, ]) +
  geom_histogram(
    aes(x = value),
    color = "blue",
    fill = "white"
  ) +
  facet_wrap(selection ~ ., ncol = 1) +
  ylab("Number of iterations") +
  xlab("Profit loss relative to the true best model ($/acre)") +
  theme_bw()

ggsave(
  here::here("GitControlled/Writing/FiguresTables/g_pi_loss.png"),
  g_pi_loss,
  dpi = 300,
  width = 6,
  height = 3.5
)
```

## All cases for LEONR-based selection (Table)

```{r}

profit_loss_data[, .(mean = mean(value), sd = sd(value)), by = .(num_folds, num_repeats, selection)] %>%
  .[selection == "LEONR-based Selection", ] %>%
  .[, mean_sd := paste0(round(mean, digits = 2), "(", round(sd, digits = 2), ")")] %>%
  .[, .(num_folds, num_repeats, mean_sd)] %>%
  dcast(num_repeats ~ num_folds, value.var = "mean_sd")

# ggplot(profit_loss_data[selection == "LEONR-based Selection", ]) +
#   geom_boxplot(aes(y = value, x = factor(num_folds), fill = factor(num_repeats)))
```

# Correlation Between GAM-Estimated EONR and True EONR

## All cases

```{r}
gam_leonr_fit_all <-
  ggplot(sum_results_gam) +
  geom_point(
    aes(x = opt_N, y = opt_N_gam),
    size = 0.5
  ) +
  geom_abline(
    slope = 1,
    intercept = 0,
    linetype = "dashed",
    color = "red"
  ) +
  xlim(50, 300) +
  ylim(50, 300) +
  facet_grid(
    rows = vars(`Number of Folds` = num_folds),
    cols = vars(`Number of Repeats` = num_repeats),
    labeller = labeller(
      `Number of Folds` = label_both,
      `Number of Repeats` = label_both
    )
  ) +
  xlab("True Local EONR") +
  ylab("GAM-Estimated Local EONR") +
  theme_bw() +
  theme(
    legend.position = "bottom"
  )
```

## Main case

```{r}
gam_leonr_fit_main <-
  ggplot(sum_results_gam[num_folds == 5 & num_repeats == 5, ]) +
  geom_point(
    aes(x = opt_N, y = opt_N_gam),
    size = 0.5
  ) +
  geom_abline(
    slope = 1,
    intercept = 0,
    linetype = "dashed",
    color = "red"
  ) +
  xlim(50, 300) +
  ylim(50, 300) +
  xlab("True Local EONR") +
  ylab("GAM-Estimated Local EONR") +
  theme_bw() +
  theme(
    legend.position = "bottom"
  )
```


# The impact of different fold repeat combination on local EONR selection and yield selection method

```{r}
#--- ranking based on LEONR ---#
perf_ranking_e <-
  comp_results[, .(num_folds, num_repeats, selection_perf_rank_LE)] %>%
  tidyr::unnest(selection_perf_rank_LE) %>%
  data.table() %>%
  .[, selection_method := "Based on Local EONR"]

#--- ranking based on Yield ---#
perf_ranking_y <-
  comp_results[, .(num_folds, num_repeats, selection_perf_rank_Y)] %>%
  tidyr::unnest(selection_perf_rank_Y) %>%
  data.table() %>%
  .[, selection_method := "Based on Yield"]

# Merge the two data frames into one
perf_ranking_combined <- rbind(perf_ranking_e, perf_ranking_y)

# Plot the combined data using dodge position and refined colors
g_sensitivity_fold_repeat <-
  ggplot(perf_ranking_combined) +
  geom_bar(aes(y = N, x = eonr_rank_true, fill = selection_method), stat = "identity", position = "dodge") +
  scale_fill_viridis_d() + # Set colors
  facet_grid(
    rows = vars(`Number of Folds` = num_folds), cols = vars(`Number of Repeats` = num_repeats),
    labeller = labeller(`Number of Folds` = label_both, `Number of Repeats` = label_both)
  ) +
  labs(
    x = "True ranking of the selected model",
    y = "Number of iterations",
    fill = "Model Selection Approach"
  ) +
  theme_bw() +
  theme(legend.position = "bottom") + # Move the legend to the bottom
  theme(strip.text = element_text(size = 9)) +
  theme(
    legend.position = "bottom",
    # plot.title = element_text(size = 10, face = "bold"),  # Title appearance
    # plot.subtitle = element_text(size = 12),
    axis.title.x = element_text(size = 12), # X-axis label appearance
    axis.title.y = element_text(size = 12), # Y-axis label appearance
    legend.title = element_text(size = 12), # Legend title appearance
    legend.text = element_text(size = 9) # Legend text appearance
  ) +
  theme(axis.title = element_text(size = 12))

ggsave(
  here::here("GitControlled/Writing/FiguresTables/g_sensitivity_fold_repeat.png"),
  g_sensitivity_fold_repeat,
  width = 6,
  height = 6,
  dpi = 300
)
```


# Average GAM EONR vs. Average Local EONR

Illustrate bias in estimating EONR

```{r}
sum_results_gam <- readRDS(here::here("Shared/Results/Mona_results/sum_results_gam.rds"))

main_sum_results <- readRDS(here::here("Shared/Results/Mona_results/main_sum_results.rds"))

# combined results other version
combined_results_other_v <-
  sum_results_gam[main_sum_results, on = c("sim", "split_id")] %>%
  .[, opt_N_dif_select := opt_N_hat - opt_N_gam]

# Group the data by "sim" and "method" columns, and calculate the average of "opt_N_hat" and "opt_N"
averaged_df <-
  combined_results_other_v %>%
  .[, .(
    avg_opt_N_hat = mean(opt_N_hat),
    avg_opt_N_gam = mean(opt_N_gam)
  ),
  by = .(sim, method)
  ]



# Create separate graphs by method using facet_wrap
g_leonr_comp <-
  ggplot(averaged_df, aes(x = avg_opt_N_gam, y = avg_opt_N_hat)) +
  geom_point(colour = "black", size = 0.5) +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "black") +
  scale_x_continuous(limits = c(100, 180)) +
  scale_y_continuous(limits = c(100, 180)) +
  labs(x = "Average GAM EONR", y = "Average Local EONR") +
  facet_wrap(~method, ncol = 2) +
  theme(strip.text = element_text(size = 6.5)) +
  theme_bw() +
  theme(
    legend.position = "bottom",
    # plot.title = element_text(size = 10, face = "bold"),  # Title appearance
    # plot.subtitle = element_text(size = 12),
    axis.title.x = element_text(size = 10), # X-axis label appearance
    axis.title.y = element_text(size = 10), # Y-axis label appearance
    legend.title = element_text(size = 11), # Legend title appearance
    legend.text = element_text(size = 10) # Legend text appearance
  ) +
  theme(axis.title = element_text(size = 12, family = "Times"))

ggsave(
  here::here("GitControlled/Writing/FiguresTables/g_leonr_comp.png"),
  g_leonr_comp,
  dpi = 300,
  height = 5,
  width = 6
)
```

# Accuracy of GAM-estimated LEONR

```{r}
g_gam_leonr <-
  sum_results_gam[, .(opt_N_gam = mean(opt_N_gam), opt_N = mean(opt_N)), by = sim] %>%
  ggplot(data = .) +
  geom_point(aes(y = opt_N, x = opt_N_gam)) +
  geom_abline(slope = 1, color = "red") +
  theme_fig +
  ylab("True Optimal LEONR (lb/acre)") +
  xlab("Estimated (by GAM) Optimal LEONR (lb/acre)")

ggsave(
  here::here("GitControlled/Writing/FiguresTables/g_gam_leonr.png"),
  g_gam_leonr,
  dpi = 300,
  height = 3.5,
  width = 6
)
```



# spatial cross validation (example of a fold with train and test data)

```{r}
#--- first simulation ---#
whole_data <-
  readRDS(here::here("Shared/Data/SimData/sim_data_1.rds"))$data[[1]] %>%
  data.table()

#--- train or test ---#
train_test_split_q <-
  readRDS(here::here("Shared/Results/sim_results_num_repeats_1_num_folds_5/train_test_split.rds"))

spatial_folds_q <-
  train_test_split_q %>%
  rowwise() %>%
  mutate(training_data = list(
    whole_data[aunit_id %in% training_ids, .(aunit_id, geometry)] %>%
      .[, type := "Training"]
  )) %>%
  mutate(test_data = list(
    whole_data[aunit_id %in% test_ids, .(aunit_id, geometry)] %>%
      .[, type := "Test"]
  )) %>%
  dplyr::mutate(combined_data = list(
    rbind(training_data, test_data)
  )) %>%
  dplyr::select(split_id, combined_data) %>%
  tidyr::unnest(cols = combined_data) %>%
  sf::st_as_sf() %>%
  dplyr::mutate(split_txt := paste0("Fold ", split_id))

g_split_example <-
  ggplot(spatial_folds_q) +
  geom_sf(aes(fill = type), color = NA) +
  facet_wrap(split_txt ~ ., ncol = 2) +
  scale_fill_discrete(
    name = "Role of the data",
    guide = guide_legend(title.position = "top", nrow = 1)
  ) +
  theme_void() +
  theme(
    legend.position = "inside",
    legend.position.inside = c(0.75, 0.2),
    strip.text = element_text(size = 12),
    legend.text = element_text(size = 12),
    legend.title = element_text(size = 12)
  )

ggplot2::ggsave(
  here::here("GitControlled/Writing/FiguresTables/g_split_example.png"),
  g_split_example,
  dpi = 300,
  height = 6,
  width = 6
)
```